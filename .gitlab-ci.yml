    # deploy para branch main
# main -> (e2e depois) -> Sandbox
# create tag
# tag -> Staging -> Prod

variables:
  NODE_VERSION: node:18
  CI: 'true'
  GIT_DEPTH: 0

image: $NODE_VERSION

default:
  tags:
    - gitlab-runner-ec2-production
  cache:  # Cache modules using lock file
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
  before_script:
      - printenv
      - echo "registry=https://registry.npmjs.org/" > .npmrc
      - echo "@wpmedia:registry=https://npm.pkg.github.com/" >> .npmrc
      - echo "//npm.pkg.github.com/:_authToken=${ARC_GITHUB_TOKEN}" >> .npmrc
      - echo "@code-store-platform:registry=https://npm.pkg.github.com/" >> .npmrc
      - echo "//npm.pkg.github.com/:_authToken=${ARC_GITHUB_TOKEN}" >> .npmrc
      - echo "@r7:registry=https://registry.npmjs.org/" >> .npmrc
      - echo "//registry.npmjs.org/:_authToken=${R7_NPM_TOKEN}" >> .npmrc
      - echo "@arcxp:registry=https://npm.pkg.github.com/" >> .npmrc
      - echo "//npm.pkg.github.com/:_authToken=${ARC_GITHUB_TOKEN}" >> .npmrc
      - echo "CONTENT_BASE=${CONTENT_BASE}" >> .env
      - echo "ARC_ACCESS_TOKEN=${ARC_ACCESS_TOKEN}" >> .env
      - export CONTENT_BASE=https://api.sandbox.newr7.arcpublishing.com
      - export ARC_ACCESS_TOKEN=T7BQIRAHM589FJ73CT3DLR1AIV2PQOSIXU9REqCy7Bn3NamJlnRBzjGsmXgNofYWCP55ENq4
      - npm ci --cache .npm --prefer-offline


stages:
  - deploy-sandbox
  - deploy-production

deploy-sandbox:
  stage: deploy-sandbox
  script:
    - apt-get update
    - apt-cache policy docker-compose
    - apt-get -y install docker-compose=2.23.3
    #for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done
    - npx fusion version
    - node deployer.mjs

deploy-production:
  stage: deploy-production
  script:
    - apt-get update
    - node deployer.mjs -name="$CI_COMMIT_TAG"
  only:
    - tags
